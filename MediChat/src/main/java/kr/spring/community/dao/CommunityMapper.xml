<?xml version="1.0" encoding="UTF-8" ?>  
<!DOCTYPE mapper   
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"   
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">  
<mapper namespace="kr.spring.community.dao.CommunityMapper"> 
	<!-- =================게시판================= -->
	<!-- 목록 -->
	<sql id="typeSearch">
		<where>
			<!-- 누적신고수 10이상이 되면 보여지지 않게 처리 -->
			<![CDATA[
				cbo_report < 10
			]]>
			<!-- 카테고리 -->
			<if test="cbo_type != null and cbo_type != ''">
				AND cbo_type=#{cbo_type}
			</if>
			<!-- 검색 -->
			<if test="keyword !=null and keyword != ''">
				<!-- 카테고리가 있는 경우 -->
				<if test="cbo_type != null and cbo_type != ''">
					
				</if>
				<!-- 카테고리가 없는 경우 -->
				<if test="keyfield == 1">
					AND cbo_title LIKE '%' || #{keyword} || '%' 
				</if>
				<if test="keyfield == 2">
					AND cbo_content LIKE '%' || #{keyword} || '%' 
				</if>
				<if test="keyfield == 3">
					AND (cbo_title LIKE '%' || #{keyword} || '%' OR
					cbo_content LIKE '%' || #{keyword} || '%')
				</if>
			</if>
		</where>
	</sql>
	<sql id="cboardOrder">
		<!-- 정렬 -->
		<if test="order == 1"><!-- 최신순 -->
			ORDER BY cbo_rdate DESC
		</if>
		<if test="order == 2"><!-- 조회수 -->
			ORDER BY cbo_hit DESC
		</if>
		<if test="order == 3"><!-- 좋아요수 -->
			ORDER BY fav_cnt DESC NULLS LAST
		</if>
		<if test="order == 4"><!-- 댓글수 -->
			ORDER BY re_cnt DESC NULLS LAST
		</if>
	</sql>
	<!-- 게시판 글 개수 -->
	<select id="selectRowCount" parameterType="map" resultType="integer">
		SELECT
			COUNT(*)
		FROM cboard JOIN member USING(mem_num)
		<include refid="typeSearch"></include>
	</select>
	<!-- 게시판 목록 -->
	<select id="selectCommunityList" parameterType="map" resultType="communityVO">
		SELECT
			*
		FROM (SELECT
			a.*,
			rownum rnum
			FROM (SELECT
					cbo_type,
					cbo_num,
					mem_num,
					<![CDATA[
					REPLACE(REPLACE(cbo_title,'<','&lt;'),'>','&gt;') cbo_title,
					]]>
					cbo_content,
					cbo_hit,
					cbo_rdate,
					mem_id,
					re_cnt,
					fav_cnt
				FROM cboard
				LEFT OUTER JOIN (SELECT COUNT(*) re_cnt, cbo_num FROM cboard_re GROUP BY cbo_num) USING(cbo_num)
				LEFT OUTER JOIN (SELECT COUNT(*) fav_cnt, cbo_num FROM cboard_fav GROUP BY cbo_num) USING(cbo_num)
				JOIN member USING (mem_num)
				<include refid="typeSearch"></include>
				<include refid="cboardOrder"></include>
				)a)
		<![CDATA[
		WHERE rnum >= #{start} AND rnum <= #{end}
		]]>
	</select>
	
	<!-- 글 등록 -->
	<insert id="insertCommunity">
		INSERT INTO cboard(
			cbo_num,
			mem_num,
			cbo_type,
			cbo_title,
			cbo_content)
		VALUES (
			cboard_seq.nextval,
			#{mem_num},
			#{cbo_type},
			#{cbo_title},
			#{cbo_content})
	</insert>
	
	<!-- 글 수정 -->
	<update id="updateCommunity" parameterType="communityVO">
		UPDATE cboard SET
			cbo_type = #{cbo_type},
			cbo_title = #{cbo_title},
			cbo_content = #{cbo_content}
		WHERE cbo_num = #{cbo_num}
	</update>
	
	<!-- =================댓글================= -->
	<!-- 댓글/답글 전체 목록 -->
	<select id="selectListCommentAndReply" parameterType="map" resultType="communityReplyVO">
		SELECT
			*
		FROM (SELECT
				a.*,
			 	rownum rnum
			  FROM (SELECT
			  			*
			  		FROM cboard_re
			  		JOIN member USING(mem_num)
			  		WHERE cbo_num=#{cbo_num}
			  		ORDER BY 
			  			/*cre_ref ASC, -- 답글이 속한 댓글 기준으로 정렬
                		cre_level ASC, -- 댓글 및 답글의 레벨 기준으로 정렬
                		cre_rdate DESC -- 작성일 기준으로 정렬*/
			  			cre_num DESC /* (기존에 작성한 코드)*/
			  		)a)
		<![CDATA[
		WHERE rnum >= #{start} AND rnum <= #{end}
		]]>
	</select>
	
	<!-- 댓글 목록 -->
	<select id="selectListComment" parameterType="map" resultType="communityReplyVO">
		SELECT 
			cre_num, 
			cbo_num, 
			mem_num,
			mem_id, 
			cre_content, 
			cre_rdate, 
			cre_mdate, 
			cre_report, 
			reply_cnt
		FROM(SELECT rownum rnum, 
						a.*
			FROM (SELECT 
						* 
				  FROM cboard_re JOIN member USING(mem_num)
								 LEFT OUTER JOIN(SELECT cre_ref ref, COUNT(*) reply_cnt 
								 				FROM cboard_re 
								 				<![CDATA[
								 				WHERE cre_level > 0 AND cre_report < 10
								 				]]>
								 				GROUP BY cre_ref) 
								 				ON ref=cre_num
								 <![CDATA[
								 WHERE cbo_num=#{cbo_num} AND cre_level=0 AND cre_report < 10
								 ]]>
				 				 ORDER BY cre_num DESC
				   ) a)
		<![CDATA[
		WHERE rnum >= #{start} AND rnum <= #{end}
		]]>
	</select>
	
	<!-- 댓글 등록 -->
	<insert id="insertComment">
		INSERT INTO cboard_re(
			cre_num,
			cbo_num,
			mem_num,
			cre_content)
		VALUES(
			cboard_re_seq.nextval,
			#{cbo_num},
			#{mem_num},
			#{cre_content})
	</insert>
	
	<!-- =================답글/대댓글================= -->
	<!-- 답글 목록 -->
	<select id="selectListReply" >
		SELECT 
		    r.cre_num,
		    r.cbo_num,
		    r.cre_content,
		    r.mem_num,
		    m.mem_id,
		    r.cre_rdate,
		    r.cre_mdate,
		    r.cre_level,
		    r.cre_ref,
		    re.mem_id parent_id
		FROM cboard_re r
		JOIN member m ON r.mem_num = m.mem_num 
		LEFT OUTER JOIN cboard_re p ON r.cre_ref = p.cre_num
		LEFT OUTER JOIN member re ON p.mem_num = re.mem_num
		<![CDATA[
		WHERE r.cre_report < 10
		]]>
		START WITH r.cre_ref = #{cre_num} /*답글에 해당하는 댓글*/
		CONNECT BY PRIOR r.cre_num = r.cre_ref
		ORDER SIBLINGS BY 
		    DECODE(r.cre_level, 1, r.cre_rdate, NULL) DESC,  -- 댓글과 대댓글은 최신순
		    DECODE(r.cre_level, 1, NULL, r.cre_rdate) ASC    -- 대댓글 하위 댓글들은 오래된 순

	</select>
	<!-- 답글 등록 -->
	<insert id="insertReply" parameterType="communityReplyVO">
		INSERT INTO cboard_re(
			cre_num,
			cbo_num,
			mem_num,
			cre_content,
			cre_level,
			cre_ref)
		VALUES(
			cboard_re_seq.nextval,
			#{cbo_num},
			#{mem_num},
			#{cre_content},
			#{cre_level},
			#{cre_ref})
	</insert>
</mapper>

